name: JRuby Dev Builds
on:
  push:
    tags:
    - '*'
  schedule:
  - cron: '0 19 * * *'
jobs:
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
      if: github.event_name == 'schedule'
    - name: Create tag
      id: create_tag
      shell: bash
      run: |
        if [[ "${{ github.event_name }}" == "schedule" ]]; then
          tag=builds-$(date +%Y%m%d-%H%M%S)
        else
          tag=$(basename "${{ github.ref }}")
        fi
        echo "::set-output name=tag::$tag"
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.create_tag.outputs.tag }}
        release_name: ${{ steps.create_tag.outputs.tag }}
        draft: true
        prerelease: false
    - name: Create artifact files
      shell: bash
      run: |
        mkdir info
        echo "${{ steps.create_release.outputs.id }}" > info/release_id
        echo "${{ steps.create_release.outputs.upload_url }}" > info/upload_url
    - uses: actions/upload-artifact@v1
      with:
        name: info
        path: info

  build:
    needs: [release]
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-16.04, ubuntu-18.04, macos-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/download-artifact@v1
      with:
        name: info
    - name: Set upload_url
      id: upload_info
      shell: bash
      run: |
        upload_url=$(cat info/upload_url)
        echo "::set-output name=upload_url::$upload_url"

    # Build
    - uses: actions/checkout@v2
    - uses: actions/setup-ruby@v1
      with:
        ruby-version: '2.6.x'
    - name: Download latest jruby nightly archive
      shell: bash
      run: |
        url=$(ruby find-jruby-head-url.rb)
        echo "$url"
        curl --fail -L -o jruby-head.tar.gz "$url"
    - uses: eregon/clean-path@v1
      with:
        regexp: '\bruby\b'
    # Extracting must be done in the native shell: https://github.com/MSP-Greg/ruby-setup-ruby/issues/1
    - run: tar xf jruby-head.tar.gz
    - name: Rename to jruby-head
      shell: bash
      run: |
        ls -l jruby-*-SNAPSHOT/bin
        mv jruby-*-SNAPSHOT jruby-head
        ls -l jruby-head/bin
    - name: Add ruby alias
      if: "!startsWith(matrix.os, 'windows')"
      run: |
        cd jruby-head/bin
        ln -s jruby ruby
    - name: Add ruby alias (Windows)
      if: startsWith(matrix.os, 'windows')
      shell: bash
      run: |
        cd jruby-head/bin
        # Copy bash launcher, so 'ruby' works in bash
        cp jruby ruby
        # Create ruby.bat, so 'ruby' works in pwsh
        echo -en "@ECHO OFF\r\n@\"%~dp0jruby.exe\" %*\r\n" > ruby.bat
    - name: Install Bundler if needed
      shell: bash
      run: |
        if [ ! -e jruby-head/bin/bundle ]; then
          export PATH="$PWD/jruby-head/bin:$PATH"
          gem env
          gem install bundler -v '~> 1' --no-document
        fi

    - name: Create archive
      run: tar czf jruby-head-${{ matrix.os }}.tar.gz jruby-head

    # Test
    - run: echo "::add-path::$PWD/jruby-head/bin"
    - run: ruby --version
    - run: gem --version
    - run: rake --version
    - run: ruby -ropen-uri -e 'puts open(%{https://rubygems.org/}) { |f| f.read(1024) }'
    - run: gem install json:2.2.0 --no-document
    - run: bundle --version
    - run: bundle install
    - run: bundle exec rake --version

    - name: Upload Built Ruby
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.upload_info.outputs.upload_url }}
        asset_path: jruby-head-${{ matrix.os }}.tar.gz
        asset_name: jruby-head-${{ matrix.os }}.tar.gz
        asset_content_type: application/gzip

  metadata:
    name: Publish Release
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v1
      with:
        name: info
    - name: Set publish_info
      id: publish_info
      shell: bash
      run: |
        release_id=$(cat info/release_id)
        echo "::set-output name=release_id::$release_id"
    - uses: eregon/publish-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        release_id: ${{ steps.publish_info.outputs.release_id }}
    - uses: eregon/keep-last-n-releases@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        n: 3
